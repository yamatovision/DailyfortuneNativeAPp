apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.appdistribution'

// Keystoreプロパティファイルの読み込み
def keystorePropertiesFile = rootProject.file("app/keystore/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "jp.dailyfortune.app"
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "jp.dailyfortune.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1001
        versionName "1.0.1-beta"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        
        // マルチDEXサポートを有効化（大規模アプリ用）
        multiDexEnabled true
        
        // リソース圧縮設定
        resConfigs "ja", "en"
    }
    
    // 署名設定
    signingConfigs {
        debug {
            // デバッグ用署名設定
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // プロパティファイルからの読み込み
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                // 環境変数からの読み込み（CI/CD用）
                if (System.getenv('ANDROID_KEYSTORE_PATH')) {
                    storeFile file(System.getenv('ANDROID_KEYSTORE_PATH'))
                    storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
                    keyAlias System.getenv('ANDROID_KEY_ALIAS')
                    keyPassword System.getenv('ANDROID_KEY_PASSWORD')
                }
            }
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // Firebase登録されているアプリIDと一致させるため、デバッグ接尾辞を無効化
            // applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
        
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 難読化を有効化
            zipAlignEnabled true
            
            // Firebase App Distribution設定
            firebaseAppDistribution {
                artifactType = "APK"  // APK形式で配布
                releaseNotes = "DailyFortune v1.0.1-beta テスト版"
                groups = "daily-fortune-testers"
            }
        }
    }
    
    // Java 機能サポート
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    // APKスプリット設定（必要に応じて）
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    
    // Lint設定
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    
    // マルチDEXサポート
    implementation "androidx.multidex:multidex:2.0.1"
    
    // Firebase関連（プッシュ通知用）
    implementation platform('com.google.firebase:firebase-bom:32.7.4')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging'
    
    // パフォーマンス最適化
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    
    // UI関連
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.browser:browser:1.8.0'
    
    // テスト関連
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    
    // Capacitorプラグイン
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
